[project]
# https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
name = "documenteer"
description = "Rubin Observatory / LSST Sphinx documentation tools, extensions, and configurations."
license = {file = "LICENSE"}
readme = "README.md"
keywords = [
    "rubin",
    "lsst",
]
# https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Intended Audience :: Developers",
    "Topic :: Documentation",
    "Topic :: Documentation :: Sphinx",
    "Framework :: Sphinx :: Extension",
    "Environment :: Console",
    "Natural Language :: English",
    "Operating System :: POSIX",
]
requires-python = ">=3.7"
dynamic = ["version"]
dependencies = [
    "Sphinx>=2.4.0",
    "PyYAML",
    "GitPython",
    "requests",
    "click",
    "sphinxcontrib-bibtex>=2.0.0",  # for pybtex plugin; bibtex_bibfiles config is required.
    "importlib_metadata; python_version < \"3.8\"",
    "tomli; python_version < \"3.11\"",
    "pydantic",
]

[project.optional-dependencies]
dev = [
    "twine",
    # Documenteer's testing and deployment deps
    "coverage[toml]",
    "pytest",
    "pytest-mock",
    # Test depedendencies for analyzing HTML output
    "lxml",
    "cssselect",
    # Extensions for documenteer's own docs
    "sphinx-click",
    "sphinxcontrib-autoprogram",
    # Type stubs
    "types-setuptools",
    "types-requests",
    "types-PyYAML",
    "types-docutils",
    "types-mock",
]
guide = [
    # Theme and extensions for Rubin user guide projects
    "sphinx_design",
    "pydata-sphinx-theme>=0.10.0,<0.13.0",
    "sphinx-autodoc-typehints",
    "sphinx-automodapi",
    "sphinx-copybutton",
    "sphinx-prompt",
    "myst-parser",
    "markdown-it-py[linkify]",
    "sphinxcontrib-mermaid",
    "sphinxext-opengraph",
]
technote = [
    # Theme and extensions for technotes
    "sphinx<7.0.0",
    "lsst-dd-rtd-theme>=0.2.3,<0.3.0",
    "sphinx-prompt",
]
pipelines = [
    # Theme and extensions for pipelines.lsst.io
    "sphinx<7.0.0",
    "lsst-sphinx-bootstrap-theme>=0.2.0,<0.3.0",
    "numpydoc",
    "sphinx-automodapi",
    "sphinx-jinja",
    "sphinxcontrib-autoprogram",
    "sphinx-prompt",
    "sphinxcontrib-doxylink",
    "sphinx-click",
]

[project.urls]
Homepage = "https://documenteer.lsst.io"
Source = "https://github.com/lsst-sqre/documenteer"

[project.scripts]
stack-docs = "documenteer.stackdocs.stackcli:main"
package-docs = "documenteer.stackdocs.packagecli:main"
build-stack-docs = "documenteer.bin.buildstackdocs:run_build_cli"
refresh-lsst-bib = "documenteer.bin.refreshlsstbib:run"

[build-system]
requires = [
    "setuptools>=61",
    "wheel",
    "setuptools_scm[toml]>=6.2"
]
build-backend = 'setuptools.build_meta'

[tool.setuptools_scm]

[tool.black]
line-length = 79
target-version = ['py38']
exclude = '''
/(
    \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | build
  | dist
  | node_modules
)/
'''
# Use single-quoted strings so TOML treats the string like a Python r-string
# Multi-line strings are implicitly treated by black as regular expressions

[tool.isort]
profile = "black"
line_length = 79
known_first_party = "documenteer"
skip = ["docs/conf.py"]

[tool.coverage.run]
parallel = true
branch = true
source = ["documenteer"]

[tool.coverage.paths]
source = ["src", ".tox/*/site-packages"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.pytest]
norecursedirs = "node_modules"

[tool.pytest.ini_options]
python_files = [
    "tests/*.py",
    "tests/*/*.py"
]

[tool.mypy]
# provisional config; disallow_untyped_defs once fully typed
disallow_untyped_defs = false
disallow_incomplete_defs = true
ignore_missing_imports = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true
plugins = ["pydantic.mypy"]
